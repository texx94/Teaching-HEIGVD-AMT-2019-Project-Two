package ch.heigvd.amt.auth.api.endpoints;

import ch.heigvd.amt.auth.api.model.User;
import ch.heigvd.amt.auth.api.util.AuthUtils;
import ch.heigvd.amt.auth.entites.UserEntity;
import ch.heigvd.amt.auth.repositories.UserRepository;
import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.Optional;

/**
 * Spring controller that implements all operations generated by codegen
 * @author Gilliand Loris
 * @author Tutic Mateo
 * @version 1.0
 * @since 11.12.2019
 */
@Controller
@Api(tags = "users")
public class UsersApiController implements UsersApi {
    @Autowired
    UserRepository userRepository;

    @Autowired
    private HttpServletRequest req;

    public ResponseEntity<User> getUser(Integer id) {
        Optional<UserEntity> userEntity = userRepository.findById(Long.valueOf(id));

        if (req.getAttribute("userID") != Long.valueOf(id)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        if (userEntity.isPresent()) {
            User user = toUser(userEntity.get());
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    public ResponseEntity<Void> updateUser(Integer id, @Valid User user) {
        UserEntity userEntity = toUserEntity(user);

        if (req.getAttribute("userID") != Long.valueOf(id)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        if (userRepository.findById(Long.valueOf(id)).isPresent()) {
            userEntity.setId(id);
            userRepository.save(userEntity);
            return ResponseEntity.ok().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    public ResponseEntity<Void> deleteUser(Integer id) {
        if (req.getAttribute("userID") != Long.valueOf(id)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        if (userRepository.findById(Long.valueOf(id)).isPresent()) {
            userRepository.deleteById(Long.valueOf(id));
            return ResponseEntity.status(204).build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    private UserEntity toUserEntity(User user) {
        UserEntity entity = new UserEntity();
        entity.setEmail(user.getEmail());
        entity.setLastname(user.getLastname());
        entity.setFirstname(user.getFirstname());
        entity.setPassword(AuthUtils.hashPassword(user.getPassword()));
        return entity;
    }

    private User toUser(UserEntity entity) {
        User user = new User();
        user.setEmail(entity.getEmail());
        user.setLastname(entity.getLastname());
        user.setFirstname(entity.getFirstname());
        user.setPassword(entity.getPassword());
        return user;
    }
}
