swagger: '2.0'
info:
  version: '1.0.0'
  title: 'User Manager'
  description: 'This API is used to manage all user from our project'
host: localhost:8080
basePath: /auth
schemes:
  - http

tags:
  - name: users
    description: Create a new user, get or update users informations
  - name: admin
    description: Only for users with admin
  - name: session
    description: Get the JWT token

paths:
  /registration:
    post:
      description: Create a new user
      operationId: createUser
      tags:
        - admin
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: user
          description: The new user to registrate
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Success
          headers:
            Location:
              description: Created user URL
              type: string
        '400':
          description: Bad request
        '401':
          description: Not authorized

  /users/{userID}:
    get:
      description: Get a specified user
      operationId: getUser
      tags:
        - users
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userID
          type: integer
          description: ID of the user to get
          required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Not authorized
        '404':
          description: Resource not found
    put:
      description: Update information about the specified user
      operationId: updateUser
      tags:
        - users
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userID
          type: integer
          description: ID of the user to update
          required: true
        - in: body
          name: user
          description: The updated user
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: Resource not found
    delete:
      description: Delete the specified user
      operationId: deleteUser
      tags:
        - users
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userID
          type: integer
          description: ID of the user to delete
          required: true
      responses:
        '200':
          description: Success
        '204':
          description: Success
        '401':
          description: Not authorized
        '404':
          description: Resource not found

  /session:
    post:
      description: Get the JWT token of the user
      operationId: getJWTToken
      tags:
        - session
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: The user credentials
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/JWTToken'
        '401':
          description: Not authorized
        '404':
          description: Resource not found

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

definitions:
  User:
    type: object
    properties:
      email:
        type: string
        format: email
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
        format: password
      isAdmin:
        type: boolean
    required:
      - email
      - firstname
      - lastname
      - password
      - isAdmin
  Credentials:
    type: object
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        format: password
    required:
      - email
      - password
  JWTToken:
    type: string
